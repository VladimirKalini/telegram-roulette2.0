import { useState, useEffect } from 'react';
import { TonConnectButton, useTonConnectUI, useTonWallet } from '@tonconnect/ui-react';
import WebApp from '@twa-dev/sdk';
import { toNano, beginCell } from 'ton';
import './App.css';

// --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ –í–í–ï–†–•–£ –§–ê–ô–õ–ê ---
const API_BASE_URL = ''; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - Nginx —Å–∞–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã

// –û–ø–∏—Å—ã–≤–∞–µ–º, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –æ–±—ä–µ–∫—Ç "–ü–æ–¥–∞—Ä–æ–∫" —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º
interface Gift {
  id: number;
  name: string;
  description: string;
  price_ton: string;
  user_gift_id?: number; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
}

// –¢–∏–ø –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
type View = 'shop' | 'inventory' | 'roulette';

// –¢–∏–ø—ã –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
interface RoulettePlayer {
  userId: number;
  username: string;
  photoUrl?: string;
  totalBet: number;
  gifts: Gift[];
  color: string;
  percentage: number;
  wonGifts?: Array<{name: string; price_ton: string}>;
  totalWinValue?: string;
}

interface RouletteState {
  isActive: boolean;
  players: RoulettePlayer[];
  timeLeft: number;
  isSpinning: boolean;
  winner?: RoulettePlayer;
  spinSeed?: number;
}

function App() {
  const [gifts, setGifts] = useState<Gift[]>([]);
  const [myGifts, setMyGifts] = useState<Gift[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [statusMessage, setStatusMessage] = useState<string>('');
  const [debugInfo, setDebugInfo] = useState<string>('');
  const [view, setView] = useState<View>('roulette'); // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä—É–ª–µ—Ç–∫–∏
  const [selectedGifts, setSelectedGifts] = useState<Gift[]>([]);
  const [showGiftSelector, setShowGiftSelector] = useState<boolean>(false);
  const [showWinnerModal, setShowWinnerModal] = useState<boolean>(false);
  const [winnerAnnouncement, setWinnerAnnouncement] = useState<string>('');
  const [rouletteState, setRouletteState] = useState<RouletteState>({
    isActive: false,
    players: [],
    timeLeft: 0,
    isSpinning: false
  });
  
  // –¶–≤–µ—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
  const playerColors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7'];
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserIcon = (username: string) => {
    const icons = ['üë§', 'üë®', 'üë©', 'üßë', 'üë¶', 'üëß', 'ü§µ', 'üë∏', 'ü§¥', 'üëÆ'];
    const index = username.length % icons.length;
    return icons[index];
  };

  const wallet = useTonWallet();
  const [tonConnectUI] = useTonConnectUI();
  const user = WebApp.initDataUnsafe?.user;
  
  // –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
  useEffect(() => {
    console.log('Wallet state:', wallet);
    console.log('User:', user);
    console.log('TonConnectUI:', tonConnectUI);
  }, [wallet, user, tonConnectUI]);

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
  useEffect(() => {
    const initialLoad = async () => {
      setLoading(true);
      try {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user) {
          await fetch(`${API_BASE_URL}/api/users/sync`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              id: user.id, 
              username: user.username,
              photoUrl: user.photo_url
            }),
          });
        }
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
        await fetchShopGifts();
      } catch (e) {
        setError(e instanceof Error ? e.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };
    initialLoad();
  }, [user]);

  // --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π polling —Ä—É–ª–µ—Ç–∫–∏ ---
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    
    if (view === 'roulette' && !rouletteState.isSpinning) {
      // –ï—Å–ª–∏ –∏–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –∏–Ω–∞—á–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
      const intervalTime = rouletteState.isActive ? 1000 : 2000;
      
      interval = setInterval(() => {
        fetchRouletteState();
      }, intervalTime);
      
      // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      fetchRouletteState();
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [view, rouletteState.isSpinning, rouletteState.isActive]); // –î–æ–±–∞–≤–ª—è–µ–º isActive –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏ —Ç–µ–ø–µ—Ä—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è backend ---

  // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
  const fetchShopGifts = async () => {
    const response = await fetch(`${API_BASE_URL}/api/store/gifts`);
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    const data: Gift[] = await response.json();
    setGifts(data);
  };

  const fetchMyGifts = async () => {
    if (!user) return;
    setLoading(true);
    setStatusMessage('');
    try {
      const response = await fetch(`${API_BASE_URL}/api/users/${user.id}/gifts`);
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è');
      const data: Gift[] = await response.json();
      setMyGifts(data);
    } catch (e) {
      setError(e instanceof Error ? e.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };
  
  // --- –õ–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ ---
  const handleBuy = async (gift: Gift) => {
    console.log('handleBuy called', { wallet, user, gift });
    
    if (!wallet) {
        setStatusMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫!');
        console.log('Opening wallet modal...');
        tonConnectUI.openModal();
        return;
    }
    
    if (!user) {
        setStatusMessage('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞—ë—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
        return;
    }
    
    setStatusMessage(`–ü–æ–∫—É–ø–∞–µ–º "${gift.name}"...`);
    const memo = `buy-gift-${gift.id}-for-user-${user.id}-${Date.now()}`;
    setDebugInfo(`DEBUG: –ú–µ–º–æ: ${memo}, –°—É–º–º–∞: ${gift.price_ton} TON, User ID: ${user.id}`);
    console.log('Transaction memo:', memo);
    
    // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Telegram WebApp API
    if (WebApp.openInvoice) {
        try {
            const invoiceUrl = `ton://transfer/${"UQA6qcGAwqhOxgX81n-P_RVAIMOkeYoaoDWtAtyWAvOZtuuA"}?amount=${toNano(gift.price_ton)}&text=${encodeURIComponent(memo)}`;
            WebApp.openInvoice(invoiceUrl, (status: string) => {
                console.log('Invoice status:', status);
                if (status === 'paid') {
                    setStatusMessage('–ü–ª–∞—Ç—ë–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–µ–º...');
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    setTimeout(() => checkPurchase(user.id, gift.id, memo), 3000);
                }
            });
            return;
        } catch (e) {
            console.log('WebApp.openInvoice failed, trying TON Connect');
        }
    }
    
    // –ï—Å–ª–∏ openInvoice –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º TON Connect
    // –°–æ–∑–¥–∞—ë–º payload —Å –º–µ–º–æ
    const body = beginCell()
      .storeUint(0, 32) // op code –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      .storeStringTail(memo)
      .endCell();
    
    const transaction = {
      validUntil: Math.floor(Date.now() / 1000) + 600,
      messages: [
        {
          address: "UQA6qcGAwqhOxgX81n-P_RVAIMOkeYoaoDWtAtyWAvOZtuuA",
          amount: toNano(gift.price_ton).toString(),
          payload: body.toBoc().toString('base64'),
        },
      ],
    };
    
    // –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ø–æ–∫—É–ø–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö TON
    setStatusMessage('–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
    
    try {
      const response = await fetch(`${API_BASE_URL}/api/store/buy`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user.id, giftId: gift.id, transactionMemo: memo }),
      });
      
      const serverResult = await response.json();
      console.log('Server response:', serverResult);
      
      if (response.ok) {
        setStatusMessage(serverResult.message || `üéÅ –£—Å–ø–µ—Ö! "${gift.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)`);
        setDebugInfo(''); // –û—á–∏—â–∞–µ–º DEBUG –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if (view === 'inventory') {
          await fetchMyGifts();
        }
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
        await fetchMyGifts();
      } else {
        throw new Error(serverResult.error || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
      }
    } catch (e) {
      console.error('Transaction error:', e);
      setStatusMessage(`–û—à–∏–±–∫–∞: ${e instanceof Error ? e.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—É–ø–∫–∏
  const checkPurchase = async (userId: number, giftId: number, memo: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/store/buy`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, giftId, transactionMemo: memo }),
      });
      
      const result = await response.json();
      if (response.ok) {
        setStatusMessage('–£—Å–ø–µ—Ö! –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.');
      } else {
        setStatusMessage(`–û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (e) {
      setStatusMessage('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
    }
  };

  // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–£–õ–ï–¢–ö–ò ---
  
  // –û—Ç–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
  const openGiftSelector = () => {
    setShowGiftSelector(true);
  };
  
  // –í—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
  const toggleGiftSelection = (gift: Gift) => {
    const isSelected = selectedGifts.some(g => g.user_gift_id === gift.user_gift_id);
    if (isSelected) {
      setSelectedGifts(selectedGifts.filter(g => g.user_gift_id !== gift.user_gift_id));
    } else {
      setSelectedGifts([...selectedGifts, gift]);
    }
  };
  
  // –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
  const placeBets = async () => {
    console.log('placeBets called with:', selectedGifts);
    setDebugInfo(`DEBUG: –ü–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–∞–≤–∫–∏, –ø–æ–¥–∞—Ä–∫–æ–≤: ${selectedGifts.length}`);
    
    if (!user || selectedGifts.length === 0) {
      setStatusMessage('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏');
      return;
    }
    
    const totalValue = selectedGifts.reduce((sum, gift) => sum + parseFloat(gift.price_ton), 0);
    setStatusMessage(`–°—Ç–∞–≤–∏–º –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —Å—É–º–º—É ${totalValue.toFixed(2)} TON...`);
    
    try {
      console.log('Starting to place bets...');
      setDebugInfo(`DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
      for (const gift of selectedGifts) {
        console.log('Placing bet for gift:', gift);
        
        const response = await fetch(`${API_BASE_URL}/api/roulette/bet`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId: user.id, userGiftId: gift.user_gift_id }),
        });
        
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          const result = await response.json();
          console.error('Bet failed:', result);
          setDebugInfo(`DEBUG: –û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏: ${result.error}`);
          setStatusMessage(`–û—à–∏–±–∫–∞: ${result.error}`);
          return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        }
        
        const result = await response.json();
        console.log('Bet successful:', result);
      }
      
      setStatusMessage(`–£—Å–ø–µ—Ö! –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${selectedGifts.length} –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ ${totalValue.toFixed(2)} TON`);
      setDebugInfo(`DEBUG: –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞! –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É–ª–µ—Ç–∫—É...`);
      setSelectedGifts([]);
      setShowGiftSelector(false);
      
      console.log('üéØ –°—Ç–∞–≤–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      await fetchRouletteState();
      await fetchMyGifts();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      setTimeout(async () => {
        await fetchRouletteState();
      }, 500);
      
      console.log('üéØ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏');
      
    } catch (e) {
      setStatusMessage(`–û—à–∏–±–∫–∞: ${e instanceof Error ? e.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏
  const fetchRouletteState = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/roulette/state`);
      if (response.ok) {
        const data = await response.json();
        console.log('üîç RAW Backend data:', JSON.stringify(data, null, 2));
        console.log('üîç Current rouletteState before update:', {
          players: rouletteState.players.length,
          isActive: rouletteState.isActive,
          isSpinning: rouletteState.isSpinning,
          timeLeft: rouletteState.timeLeft
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ backend (–ø–æ–ª–µ players, –Ω–µ participants)
        const players = data.players ? data.players.map((p: any) => ({
          userId: parseInt(p.userId),
          username: p.username,
          photoUrl: p.photoUrl,
          totalBet: p.totalBet,
          percentage: p.percentage,
          color: p.color || '#FF6B6B' // fallback —Ü–≤–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç
        })) : [];
        
        console.log('üîç Players after mapping:', players.map(p => ({ 
          userId: p.userId, 
          username: p.username, 
          color: p.color,
          percentage: p.percentage 
        })));
        
        console.log('üîç Processed players:', players);
        
        const newState = {
          isActive: data.status === 'countdown',
          players,
          timeLeft: data.timeLeft || 0,
          isSpinning: data.status === 'spinning',
          winner: data.winner
        };
        
        console.log('üîç Setting roulette state:', newState);
        setRouletteState(newState);
        
        // –ï—Å–ª–∏ backend —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç—É—Å spinning, –∞ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º
        if (data.status === 'spinning' && !rouletteState.isSpinning) {
          console.log('üéØ Backend –ø–µ—Ä–µ–≤–µ–ª –≤ spinning, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é');
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
          setTimeout(() => {
            spinRoulette();
          }, 100);
        }
      } else {
        console.error('‚ùå Response not ok:', response.status, response.statusText);
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏:', e);
    }
  };

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É
  const spinRoulette = async () => {
    try {
      setStatusMessage('–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...');
      setRouletteState(prev => ({ ...prev, isSpinning: true }));
      
      const response = await fetch(`${API_BASE_URL}/api/roulette/spin`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      
      if (response.ok) {
        const result = await response.json();
        
        // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        setRouletteState(prev => ({ 
          ...prev, 
          isSpinning: true,
          spinSeed: result.spinSeed 
        }));
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (7 —Å–µ–∫—É–Ω–¥)
        setTimeout(() => {
          const announcement = `üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: ${result.winner.username}! –í—ã–∏–≥—Ä–∞–ª ${result.winner.wonGifts?.length || 0} –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ —Å—É–º–º—É ${result.winner.totalWinValue || '0'} TON!`;
          
          setStatusMessage(`üéâ ${result.spinResult}`);
          setWinnerAnnouncement(announcement);
          setRouletteState(prev => ({ 
            ...prev, 
            isSpinning: false, 
            winner: result.winner 
          }));
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
          setShowWinnerModal(true);
          
          // –£–±–∏—Ä–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
          setTimeout(() => {
            setWinnerAnnouncement('');
          }, 5000);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            fetchRouletteState();
            fetchMyGifts();
          }, 2000);
        }, 7000); // –û–±–Ω–æ–≤–∏–ª–∏ –¥–æ 7 —Å–µ–∫—É–Ω–¥
        
      } else {
        const errorResult = await response.json();
        setStatusMessage('–û—à–∏–±–∫–∞: ' + errorResult.error);
        setRouletteState(prev => ({ ...prev, isSpinning: false }));
      }
    } catch (e) {
      setStatusMessage('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏');
      setRouletteState(prev => ({ ...prev, isSpinning: false }));
    }
  };

  // –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const resetRound = async () => {
    try {
      setStatusMessage('–û—á–∏—â–∞–µ–º —Ä–∞—É–Ω–¥...');
      
      const response = await fetch(`${API_BASE_URL}/api/roulette/reset`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      
      if (response.ok) {
        setStatusMessage('–†–∞—É–Ω–¥ –æ—á–∏—â–µ–Ω!');
        setShowWinnerModal(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        await fetchRouletteState();
        await fetchMyGifts();
      } else {
        const result = await response.json();
        setStatusMessage('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ' + result.error);
      }
    } catch (e) {
      setStatusMessage('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–∞—É–Ω–¥–∞');
    }
  };

  // --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ ---
  const changeView = (newView: View) => {
    setError(null);
    setStatusMessage('');
    if (newView === 'inventory' || newView === 'roulette') {
      fetchMyGifts();
    }
    if (newView === 'roulette') {
      fetchRouletteState();
    }
    setView(newView);
  };

  // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ ---
  const renderContent = () => {
    if (loading) return <h1>–ó–∞–≥—Ä—É–∑–∫–∞...</h1>;
    if (error) return <h1>–û—à–∏–±–∫–∞: {error}</h1>;

    switch (view) {
      case 'shop':
        return (
          <div className="gift-list">
            {gifts.map((gift) => (
              <div key={gift.id} className="gift-card">
                <h2>{gift.name}</h2>
                <p>{gift.description}</p>
                <div className="price-tag">{parseFloat(gift.price_ton).toFixed(2)} TON</div>
                <button className="buy-button" onClick={() => handleBuy(gift)}>–ö—É–ø–∏—Ç—å</button>
              </div>
            ))}
          </div>
        );
      case 'inventory':
        return (
          <div className="gift-list">
            {myGifts.length > 0 ? myGifts.map((gift) => (
              <div key={gift.user_gift_id} className="gift-card inventory-card">
                <h2>{gift.name}</h2>
                <p>{gift.description}</p>
              </div>
            )) : <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.</p>}
          </div>
        );
      case 'roulette':
        console.log('üéØ Rendering roulette with state:', { 
          playersCount: rouletteState.players.length, 
          players: rouletteState.players.map(p => ({ username: p.username, color: p.color, percentage: p.percentage }))
        });
        
        return (
          <div style={{position: 'relative'}}>
            <div style={{position: 'relative', width: '350px', height: '350px', margin: '20px auto'}}>
              {/* –£–∫–∞–∑–∞—Ç–µ–ª—å - –í–°–ï–ì–î–ê –ù–ê –ú–ï–°–¢–ï */}
              <div style={{
                position: 'absolute',
                top: '-10px',
                left: '50%',
                transform: 'translateX(-50%)',
                width: '0',
                height: '0',
                borderLeft: '15px solid transparent',
                borderRight: '15px solid transparent',
                borderTop: '30px solid #ff0000',
                zIndex: 20
              }}></div>
              
              {/* –†—É–ª–µ—Ç–∫–∞ - –ö–†–£–¢–ò–¢–°–Ø */}
              <div className="roulette-wheel" style={{
                width: '350px', 
                height: '350px', 
                border: '8px solid #333', 
                borderRadius: '50%', 
                position: 'relative',
                background: rouletteState.players.length === 0 ? '#f0f0f0' : 'conic-gradient(' + 
                  rouletteState.players.map((p, i) => {
                    const startPercentage = rouletteState.players.slice(0, i).reduce((sum, player) => sum + player.percentage, 0);
                    const endPercentage = startPercentage + p.percentage;
                    return `${p.color} ${startPercentage}% ${endPercentage}%`;
                  }).join(', ') + ')',
                transition: rouletteState.isSpinning ? 'transform 7s cubic-bezier(0.25, 0.1, 0.25, 1.0)' : 'none',
                transform: rouletteState.isSpinning ? `rotate(${3600 + (rouletteState.spinSeed || 0)}deg)` : 'rotate(0deg)',
                willChange: rouletteState.isSpinning ? 'transform' : 'auto' // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è GPU
              }}>
              
              {/* –ò–≥—Ä–æ–∫–∏ –Ω–∞ —Ä—É–ª–µ—Ç–∫–µ */}
              {rouletteState.players.length > 0 && (
                <div style={{position: 'relative', width: '100%', height: '100%'}}>
                  {rouletteState.players.map((player, index) => {
                    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                    const startAngle = rouletteState.players.slice(0, index).reduce((sum, p) => sum + (p.percentage * 3.6), 0);
                    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É–≥–æ–ª –∑–æ–Ω—ã –∏–≥—Ä–æ–∫–∞
                    const centerAngle = startAngle + (player.percentage * 3.6) / 2;
                    
                    const isCurrentUser = user && player.userId === user.id;
                    
                    return (
                      <div key={player.userId} style={{
                        position: 'absolute',
                        top: '50%',
                        left: '50%',
                        transform: `rotate(${centerAngle}deg) translateY(-140px) rotate(-${centerAngle}deg)`,
                        transformOrigin: '0 0',
                        textAlign: 'center',
                        fontSize: '24px',
                        filter: isCurrentUser ? 'drop-shadow(0 0 8px #ffff00)' : 'drop-shadow(2px 2px 4px rgba(0,0,0,0.8))'
                      }}>
                        <div style={{
                          backgroundColor: isCurrentUser ? 'rgba(255,255,0,0.2)' : 'rgba(255,255,255,0.1)', 
                          borderRadius: '50%', 
                          width: '40px', 
                          height: '40px', 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'center',
                          border: isCurrentUser ? '2px solid #ffff00' : '2px solid rgba(255,255,255,0.3)',
                          overflow: 'hidden'
                        }}>
                          {player.photoUrl ? (
                            <img 
                              src={player.photoUrl} 
                              alt={player.username}
                              style={{
                                width: '100%',
                                height: '100%',
                                objectFit: 'cover',
                                borderRadius: '50%'
                              }}
                              onError={(e) => {
                                // Fallback to emoji if image fails to load
                                const target = e.target as HTMLImageElement;
                                target.style.display = 'none';
                                const parent = target.parentElement;
                                if (parent) {
                                  parent.innerHTML = getUserIcon(player.username);
                                  parent.style.fontSize = '24px';
                                }
                              }}
                            />
                          ) : (
                            getUserIcon(player.username)
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}

              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ */}
              <div style={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%)',
                width: '120px',
                height: '120px',
                backgroundColor: rouletteState.players.length === 0 ? '#f5f5f5' : 
                  rouletteState.timeLeft > 0 ? '#ff4444' : 
                  rouletteState.isSpinning ? '#ff8c00' : 
                  rouletteState.winner ? '#4CAF50' : '#2196F3',
                borderRadius: '50%',
                border: '4px solid #333',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '14px',
                fontWeight: 'bold',
                textAlign: 'center',
                color: 'white',
                textShadow: '1px 1px 2px rgba(0,0,0,0.7)',
                boxShadow: '0 4px 12px rgba(0,0,0,0.3)'
              }}>
                {rouletteState.players.length === 0 ? (
                  <div style={{color: '#999'}}>
                    <div style={{fontSize: '24px'}}>üéØ</div>
                    <div style={{fontSize: '12px', marginTop: '8px'}}>–û–ñ–ò–î–ê–ù–ò–ï</div>
                    <div style={{fontSize: '10px', marginTop: '2px'}}>–ò–ì–†–û–ö–û–í</div>
                  </div>
                ) : rouletteState.timeLeft > 0 ? (
                  <div>
                    <div style={{fontSize: '36px', fontWeight: 'bold'}}>{rouletteState.timeLeft}</div>
                    <div style={{fontSize: '11px', marginTop: '2px'}}>–°–ï–ö–£–ù–î –î–û</div>
                    <div style={{fontSize: '11px'}}>–ó–ê–ü–£–°–ö–ê</div>
                  </div>
                ) : rouletteState.isSpinning ? (
                  <div>
                    <div style={{fontSize: '24px'}}>üé≤</div>
                    <div style={{fontSize: '14px', marginTop: '8px'}}>–ö–†–£–¢–ò–ú</div>
                    <div style={{fontSize: '10px', marginTop: '2px'}}>–†–£–õ–ï–¢–ö–£</div>
                  </div>
                ) : rouletteState.winner ? (
                  <div>
                    <div style={{fontSize: '20px'}}>üéâ</div>
                    <div style={{fontSize: '11px', marginTop: '5px'}}>–ü–û–ë–ï–î–ò–¢–ï–õ–¨:</div>
                    <div style={{fontSize: '12px', marginTop: '2px', fontWeight: 'bold'}}>{rouletteState.winner.username}</div>
                    {rouletteState.winner.wonGifts && rouletteState.winner.wonGifts.length > 0 && (
                      <div style={{fontSize: '9px', marginTop: '2px'}}>
                        {rouletteState.winner.wonGifts.length} –ø–æ–¥–∞—Ä–∫–æ–≤
                      </div>
                    )}
                  </div>
                ) : rouletteState.players.length >= 2 ? (
                  <div>
                    <div style={{fontSize: '20px'}}>‚ö°</div>
                    <div style={{fontSize: '12px', marginTop: '5px'}}>–ì–û–¢–û–í –ö</div>
                    <div style={{fontSize: '12px'}}>–ó–ê–ü–£–°–ö–£</div>
                  </div>
                ) : (
                  <div>
                    <div style={{fontSize: '20px'}}>‚è≥</div>
                    <div style={{fontSize: '11px', marginTop: '5px'}}>–ò–ì–†–û–ö–û–í: {rouletteState.players.length}/2</div>
                    <div style={{fontSize: '10px', marginTop: '2px'}}>–ñ–î–ï–ú –ï–©–ï</div>
                  </div>
                )}
              </div>

              </div>
            </div>
            
            <div style={{textAlign: 'center', marginBottom: '20px'}}>
              <button 
                onClick={openGiftSelector}
                disabled={rouletteState.isSpinning}
                style={{
                  padding: '10px 20px',
                  fontSize: '16px',
                  backgroundColor: '#4ECDC4',
                  color: 'white',
                  border: 'none',
                  borderRadius: '5px',
                  cursor: rouletteState.isSpinning ? 'not-allowed' : 'pointer',
                  opacity: rouletteState.isSpinning ? 0.5 : 1,
                  marginRight: '10px'
                }}
              >
                –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ ({selectedGifts.length})
              </button>
              
              <button 
                onClick={resetRound}
                style={{
                  padding: '10px 20px',
                  fontSize: '16px',
                  backgroundColor: '#ff4757',
                  color: 'white',
                  border: 'none',
                  borderRadius: '5px',
                  cursor: 'pointer'
                }}
              >
                üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—É–Ω–¥
              </button>
            </div>
            
            {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
            {rouletteState.players.length > 0 && (
              <div style={{
                backgroundColor: '#f8f9fa',
                borderRadius: '15px',
                padding: '20px',
                marginTop: '20px',
                border: '1px solid #e0e0e0'
              }}>
                <h3 style={{
                  color: '#333',
                  textAlign: 'center',
                  marginBottom: '20px',
                  fontSize: '18px',
                  margin: '0 0 20px 0'
                }}>
                  üéÆ –ò–≥—Ä–æ–∫–∏ –≤ —Ä–∞—É–Ω–¥–µ ({rouletteState.players.length}/5)
                </h3>
                
                <div style={{
                  display: 'grid',
                  gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
                  gap: '15px'
                }}>
                  {rouletteState.players.map((player, index) => {
                    const isCurrentUser = user && player.userId === user.id;
                    
                    return (
                      <div key={player.userId} style={{
                        backgroundColor: isCurrentUser ? '#fff9c4' : 'white',
                        border: `2px solid ${isCurrentUser ? '#ffd700' : player.color}`,
                        borderRadius: '12px',
                        padding: '15px',
                        position: 'relative'
                      }}>
                        {isCurrentUser && (
                          <div style={{
                            position: 'absolute',
                            top: '-8px',
                            right: '10px',
                            backgroundColor: '#ffd700',
                            color: '#333',
                            padding: '4px 8px',
                            borderRadius: '10px',
                            fontSize: '12px',
                            fontWeight: 'bold'
                          }}>
                            –í–´
                          </div>
                        )}
                        
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          marginBottom: '12px'
                        }}>
                          <div style={{
                            fontSize: '24px',
                            marginRight: '12px',
                            backgroundColor: player.color,
                            borderRadius: '50%',
                            width: '40px',
                            height: '40px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            overflow: 'hidden',
                            border: '2px solid white'
                          }}>
                            {player.photoUrl ? (
                              <img 
                                src={player.photoUrl} 
                                alt={player.username}
                                style={{
                                  width: '100%',
                                  height: '100%',
                                  objectFit: 'cover',
                                  borderRadius: '50%'
                                }}
                                onError={(e) => {
                                  // Fallback to emoji if image fails to load
                                  const target = e.target as HTMLImageElement;
                                  target.style.display = 'none';
                                  const parent = target.parentElement;
                                  if (parent) {
                                    parent.innerHTML = getUserIcon(player.username);
                                    parent.style.fontSize = '24px';
                                    parent.style.color = 'white';
                                  }
                                }}
                              />
                            ) : (
                              <span style={{color: 'white'}}>{getUserIcon(player.username)}</span>
                            )}
                          </div>
                          <div>
                            <div style={{
                              fontSize: '16px',
                              fontWeight: 'bold',
                              color: '#333',
                              marginBottom: '2px'
                            }}>
                              {player.username}
                            </div>
                            <div style={{
                              fontSize: '14px',
                              color: '#666'
                            }}>
                              –°—Ç–∞–≤–∫–∞: {player.totalBet.toFixed(2)} TON
                            </div>
                          </div>
                        </div>
                        
                        <div style={{
                          backgroundColor: '#f1f3f4',
                          borderRadius: '8px',
                          padding: '10px',
                          marginBottom: '10px'
                        }}>
                          <div style={{
                            fontSize: '12px',
                            color: '#666',
                            marginBottom: '5px',
                            fontWeight: 'bold'
                          }}>
                            –ü–æ–¥–∞—Ä–∫–∏ –≤ —Å—Ç–∞–≤–∫–µ:
                          </div>
                          {player.gifts && player.gifts.length > 0 ? (
                            <div style={{fontSize: '12px', color: '#333'}}>
                              {player.gifts.map((gift, giftIndex) => (
                                <div key={giftIndex} style={{
                                  display: 'flex',
                                  justifyContent: 'space-between',
                                  marginBottom: '2px'
                                }}>
                                  <span>{gift.name}</span>
                                  <span style={{fontWeight: 'bold'}}>
                                    {parseFloat(gift.price_ton).toFixed(2)} TON
                                  </span>
                                </div>
                              ))}
                            </div>
                          ) : (
                            <div style={{fontSize: '12px', color: '#999'}}>
                              –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
                            </div>
                          )}
                        </div>
                        
                        <div style={{
                          backgroundColor: player.color,
                          color: 'white',
                          borderRadius: '8px',
                          padding: '8px 12px',
                          textAlign: 'center',
                          fontWeight: 'bold',
                          fontSize: '14px'
                        }}>
                          üéØ –®–∞–Ω—Å –ø–æ–±–µ–¥—ã: {player.percentage.toFixed(1)}%
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
            
            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ */}
            {showGiftSelector && (
              <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: 'rgba(0,0,0,0.8)',
                zIndex: 1000,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <div style={{
                  backgroundColor: '#f8f9fa',
                  padding: '25px',
                  borderRadius: '15px',
                  maxWidth: '500px',
                  maxHeight: '70vh',
                  overflow: 'auto',
                  boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
                  border: '1px solid #e0e0e0'
                }}>
                  <h3 style={{color: '#333', textAlign: 'center', marginBottom: '20px', fontSize: '18px'}}>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏</h3>
                  
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',
                    gap: '12px',
                    marginBottom: '20px'
                  }}>
                    {myGifts.length > 0 ? myGifts.map((gift) => {
                      const isSelected = selectedGifts.some(g => g.user_gift_id === gift.user_gift_id);
                      return (
                        <div 
                          key={gift.user_gift_id} 
                          onClick={() => toggleGiftSelection(gift)}
                          style={{
                            cursor: 'pointer',
                            border: isSelected ? '2px solid #4ECDC4' : '2px solid #ddd',
                            backgroundColor: isSelected ? '#e8f8f7' : 'white',
                            borderRadius: '8px',
                            padding: '12px',
                            textAlign: 'center',
                            transition: 'all 0.2s ease',
                            position: 'relative'
                          }}
                        >
                          <h4 style={{color: '#333', fontSize: '14px', margin: '0 0 8px 0'}}>{gift.name}</h4>
                          <div style={{color: '#666', fontSize: '12px', fontWeight: 'bold'}}>{parseFloat(gift.price_ton).toFixed(2)} TON</div>
                          {isSelected && (
                            <div style={{
                              position: 'absolute',
                              top: '5px',
                              right: '5px',
                              color: '#4ECDC4',
                              fontSize: '16px',
                              fontWeight: 'bold'
                            }}>‚úì</div>
                          )}
                        </div>
                      );
                    }) : <p style={{color: '#666', textAlign: 'center'}}>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.</p>}
                  </div>
                  
                  <div style={{textAlign: 'center', borderTop: '1px solid #e0e0e0', paddingTop: '15px'}}>
                    {selectedGifts.length > 0 && (
                      <div style={{
                        backgroundColor: '#e8f5e8',
                        padding: '8px 12px',
                        borderRadius: '6px',
                        marginBottom: '15px',
                        color: '#333',
                        fontSize: '14px',
                        fontWeight: 'bold'
                      }}>
                        –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {selectedGifts.reduce((sum, gift) => sum + parseFloat(gift.price_ton), 0).toFixed(2)} TON
                      </div>
                    )}
                    
                    <button 
                      onClick={placeBets}
                      disabled={selectedGifts.length === 0}
                      style={{
                        padding: '12px 24px',
                        fontSize: '16px',
                        backgroundColor: selectedGifts.length > 0 ? '#4ECDC4' : '#ccc',
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        cursor: selectedGifts.length > 0 ? 'pointer' : 'not-allowed',
                        marginRight: '10px',
                        fontWeight: 'bold',
                        transition: 'all 0.2s ease'
                      }}
                    >
                      üé≤ –ü–æ—Å—Ç–∞–≤–∏—Ç—å ({selectedGifts.length})
                    </button>
                    
                    <button 
                      onClick={() => setShowGiftSelector(false)}
                      style={{
                        padding: '12px 24px',
                        fontSize: '16px',
                        backgroundColor: '#6c757d',
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        cursor: 'pointer',
                        fontWeight: 'bold',
                        transition: 'all 0.2s ease'
                      }}
                    >
                      ‚úñ –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                </div>
              </div>
            )}
            
            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
            {showWinnerModal && rouletteState.winner && (
              <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: 'rgba(0,0,0,0.8)',
                zIndex: 1001,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <div style={{
                  backgroundColor: '#f8f9fa',
                  padding: '30px',
                  borderRadius: '20px',
                  maxWidth: '400px',
                  boxShadow: '0 15px 40px rgba(0,0,0,0.4)',
                  border: '2px solid #4ECDC4',
                  textAlign: 'center'
                }}>
                  <div style={{fontSize: '48px', marginBottom: '20px'}}>üéâ</div>
                  <h2 style={{color: '#333', marginBottom: '15px', fontSize: '24px'}}>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
                  <div style={{
                    backgroundColor: '#e8f8f7',
                    padding: '15px',
                    borderRadius: '10px',
                    marginBottom: '20px',
                    border: '1px solid #4ECDC4'
                  }}>
                    <div style={{fontSize: '20px', color: '#333', fontWeight: 'bold', marginBottom: '10px'}}>
                      {rouletteState.winner.username}
                    </div>
                    <div style={{color: '#666', fontSize: '16px', marginBottom: '15px'}}>
                      –í—ã–∏–≥—Ä–∞–ª —Ä—É–ª–µ—Ç–∫—É!
                    </div>
                    
                    {rouletteState.winner.wonGifts && rouletteState.winner.wonGifts.length > 0 && (
                      <div>
                        <div style={{fontSize: '14px', color: '#333', marginBottom: '10px', fontWeight: 'bold'}}>
                          –í—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:
                        </div>
                        <div style={{
                          maxHeight: '150px',
                          overflowY: 'auto',
                          backgroundColor: 'white',
                          padding: '10px',
                          borderRadius: '8px',
                          border: '1px solid #ddd'
                        }}>
                          {rouletteState.winner.wonGifts.map((gift, index) => (
                            <div key={index} style={{
                              display: 'flex',
                              justifyContent: 'space-between',
                              alignItems: 'center',
                              padding: '5px 0',
                              borderBottom: index < rouletteState.winner.wonGifts!.length - 1 ? '1px solid #eee' : 'none'
                            }}>
                              <span style={{fontSize: '13px', color: '#333'}}>{gift.name}</span>
                              <span style={{fontSize: '12px', color: '#666', fontWeight: 'bold'}}>
                                {parseFloat(gift.price_ton).toFixed(2)} TON
                              </span>
                            </div>
                          ))}
                        </div>
                        
                        {rouletteState.winner.totalWinValue && (
                          <div style={{
                            marginTop: '15px',
                            padding: '10px',
                            backgroundColor: '#fff3cd',
                            borderRadius: '8px',
                            border: '1px solid #ffeaa7'
                          }}>
                            <div style={{fontSize: '16px', color: '#333', fontWeight: 'bold'}}>
                              –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {rouletteState.winner.totalWinValue} TON
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                  
                  <button 
                    onClick={() => setShowWinnerModal(false)}
                    style={{
                      padding: '12px 30px',
                      fontSize: '16px',
                      backgroundColor: '#4ECDC4',
                      color: 'white',
                      border: 'none',
                      borderRadius: '10px',
                      cursor: 'pointer',
                      fontWeight: 'bold',
                      transition: 'all 0.2s ease'
                    }}
                  >
                    ‚ú® –û—Ç–ª–∏—á–Ω–æ!
                  </button>
                </div>
              </div>
            )}
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="container">
      <header className="header">
        <h1>{view === 'shop' ? '–ú–∞–≥–∞–∑–∏–Ω' : view === 'inventory' ? '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å' : '–†—É–ª–µ—Ç–∫–∞'}</h1>
        <div>
          <div style={{backgroundColor: '#ffeb3b', padding: '5px', borderRadius: '3px', fontSize: '12px', marginBottom: '10px', color: '#000'}}>
            üìù –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
          </div>
          <TonConnectButton />
          <div style={{fontSize: '12px', marginTop: '5px'}}>
            –ö–æ—à–µ–ª—ë–∫: {wallet ? `–ü–æ–¥–∫–ª—é—á—ë–Ω (${wallet.account.address.slice(0,6)}...)` : '–ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω'}
          </div>
        </div>
      </header>
      
      <nav className="navigation">
        <button onClick={() => changeView('roulette')} className={view === 'roulette' ? 'active' : ''}>–†—É–ª–µ—Ç–∫–∞</button>
        <button onClick={() => changeView('shop')} className={view === 'shop' ? 'active' : ''}>–ú–∞–≥–∞–∑–∏–Ω</button>
        <button onClick={() => changeView('inventory')} className={view === 'inventory' ? 'active' : ''}>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</button>
      </nav>

      {winnerAnnouncement && (
        <div style={{
          position: 'fixed',
          top: '20px',
          left: '50%',
          transform: 'translateX(-50%)',
          backgroundColor: '#4CAF50',
          color: 'white',
          padding: '15px 25px',
          borderRadius: '25px',
          fontSize: '16px',
          fontWeight: 'bold',
          zIndex: 9999,
          boxShadow: '0 4px 20px rgba(76, 175, 80, 0.4)',
          animation: 'fadeInScale 0.5s ease-out'
        }}>
          {winnerAnnouncement}
        </div>
      )}
      
      {statusMessage && <div className="status-message">{statusMessage}</div>}
      {debugInfo && <div style={{background: '#f0f0f0', padding: '10px', fontSize: '12px', marginBottom: '10px', color: '#000'}}>{debugInfo}</div>}
      
      {renderContent()}
    </div>
  );
}

export default App;

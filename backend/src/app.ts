import express, { Express, Request, Response } from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import { findTransaction } from './ton-service.js';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.js
import { 
  pool, 
  createUsersTable, 
  findOrCreateUser, 
  createGiftsTable, 
  createUserGiftsTable, 
  getAllGifts, 
  seedGifts, 
  grantGiftToUser, 
  getGiftById,
  getUserGifts,
  createRoundsTable,
  createBetsTable,
  getCurrentRound,
  placeBet
} from './database.js'; 

dotenv.config();

const app: Express = express();
const PORT: number = parseInt(process.env.PORT as string, 10) || 3000;

app.use(express.json());
app.use(cors());

// --- API –ú–∞—Ä—à—Ä—É—Ç—ã ---

// 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
app.get('/api/store/gifts', async (req: Request, res: Response) => {
    try {
      const gifts = await getAllGifts();
      res.status(200).json(gifts);
    } catch (error) {
      console.error('Error fetching gifts:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
});

// 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–∏—Å–∫) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/users/sync', async (req: Request, res: Response) => {
  const { id, username } = req.body;
  if (!id) {
    return res.status(400).json({ error: 'User ID is required' });
  }
  try {
    await findOrCreateUser(id, username);
    res.status(200).json({ message: 'User synced successfully' });
  } catch (error) {
    console.error('Error syncing user:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// 3. –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞
app.post('/api/store/buy', async (req: Request, res: Response) => {
    const { userId, giftId, transactionMemo } = req.body;
  
    if (!userId || !giftId || !transactionMemo) {
      return res.status(400).json({ error: 'userId, giftId, and transactionMemo are required' });
    }
  
    try {
      const gift = await getGiftById(giftId);
      if (!gift) {
        return res.status(404).json({ error: 'Gift not found' });
      }
      const giftPrice = parseFloat(gift.price_ton);

      const transactionFound = await findTransaction(giftPrice, transactionMemo);
  
      if (transactionFound) {
        await grantGiftToUser(userId, giftId);
        res.status(200).json({ message: `Purchase successful! Gift ${giftId} granted to user ${userId}` });
      } else {
        res.status(400).json({ error: 'Transaction not found or invalid' });
      }
    } catch (error) {
      console.error('Error processing purchase:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
});

// 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/users/:userId/gifts', async (req: Request, res: Response) => {
  try {
    const userId = parseInt(req.params.userId, 10);
    if (isNaN(userId)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }
    const gifts = await getUserGifts(userId);
    res.status(200).json(gifts);
  } catch (error) {
    console.error('Error fetching user gifts:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// 5. –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ —Ä—É–ª–µ—Ç–∫–µ
app.post('/api/roulette/bet', async (req: Request, res: Response) => {
  const { userId, userGiftId } = req.body;

  if (!userId || !userGiftId) {
    return res.status(400).json({ error: 'userId and userGiftId are required' });
  }

  try {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    const currentRound = await getCurrentRound();

    // –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
    await placeBet(currentRound.id, userGiftId, userId);

    res.status(200).json({ message: 'Bet placed successfully in round ' + currentRound.id });
  } catch (error) {
    console.error('Error placing bet:', error);
    // –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω (UNIQUE constraint)
    res.status(500).json({ error: 'Internal server error or gift already bet' });
  }
});


// --- –ó–∞–ø—É—Å–∫ –°–µ—Ä–≤–µ—Ä–∞ ---
const startServer = async () => {
  try {
    await pool.query('SELECT NOW()');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    await createUsersTable();
    await createGiftsTable();
    await createUserGiftsTable();
    await createRoundsTable();
    await createBetsTable();
    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.');

    // –ù–∞–ø–æ–ª–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    await seedGifts();
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ "gifts" –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.');

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: ${PORT}`);
    });
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:', error);
  }
};

startServer();
